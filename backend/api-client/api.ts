/* tslint:disable */
/* eslint-disable */
/**
 * Todo API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Def0
 */
export interface Def0 {
    /**
     * 
     * @type {string}
     * @memberof Def0
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Def0
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Def0
     */
    'description': string;
    /**
     * 
     * @type {Array<Def1>}
     * @memberof Def0
     */
    'items': Array<Def1>;
    /**
     * 
     * @type {Def2}
     * @memberof Def0
     */
    'state': Def2;
}


/**
 * 
 * @export
 * @interface Def1
 */
export interface Def1 {
    /**
     * 
     * @type {string}
     * @memberof Def1
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Def1
     */
    'description': string;
    /**
     * 
     * @type {Def2}
     * @memberof Def1
     */
    'state': Def2;
    /**
     * 
     * @type {Array<string>}
     * @memberof Def1
     */
    'assignedTo': Array<string>;
}


/**
 * 
 * @export
 * @interface Def10
 */
export interface Def10 {
    /**
     * 
     * @type {string}
     * @memberof Def10
     */
    'message': string;
    /**
     * 
     * @type {Def1}
     * @memberof Def10
     */
    'data': Def1;
}
/**
 * 
 * @export
 * @interface Def11
 */
export interface Def11 {
    /**
     * 
     * @type {string}
     * @memberof Def11
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Def11
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface Def12
 */
export interface Def12 {
    /**
     * 
     * @type {string}
     * @memberof Def12
     */
    'message': string;
    /**
     * 
     * @type {Def11}
     * @memberof Def12
     */
    'data': Def11;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const Def2 = {
    Pending: 'PENDING',
    InProgress: 'IN-PROGRESS',
    Done: 'DONE'
} as const;

export type Def2 = typeof Def2[keyof typeof Def2];


/**
 * 
 * @export
 * @interface Def3
 */
export interface Def3 {
    /**
     * 
     * @type {string}
     * @memberof Def3
     */
    'message': string;
    /**
     * 
     * @type {Array<Def0>}
     * @memberof Def3
     */
    'data': Array<Def0>;
}
/**
 * 
 * @export
 * @interface Def4
 */
export interface Def4 {
    /**
     * 
     * @type {string}
     * @memberof Def4
     */
    'message': string;
    /**
     * 
     * @type {Def0}
     * @memberof Def4
     */
    'data': Def0;
}
/**
 * 
 * @export
 * @interface Def5
 */
export interface Def5 {
    /**
     * 
     * @type {string}
     * @memberof Def5
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface Def6
 */
export interface Def6 {
    /**
     * 
     * @type {string}
     * @memberof Def6
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface Def7
 */
export interface Def7 {
    /**
     * 
     * @type {string}
     * @memberof Def7
     */
    'message': string;
    /**
     * 
     * @type {Array<Def1>}
     * @memberof Def7
     */
    'data': Array<Def1>;
}
/**
 * 
 * @export
 * @interface Def9
 */
export interface Def9 {
    /**
     * 
     * @type {string}
     * @memberof Def9
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface ListsIdItemsItemIdPutRequest
 */
export interface ListsIdItemsItemIdPutRequest {
    /**
     * 
     * @type {Def2}
     * @memberof ListsIdItemsItemIdPutRequest
     */
    'state'?: Def2;
    /**
     * The description of the item
     * @type {string}
     * @memberof ListsIdItemsItemIdPutRequest
     */
    'description'?: string;
}


/**
 * 
 * @export
 * @interface ListsIdItemsPostRequest
 */
export interface ListsIdItemsPostRequest {
    /**
     * The id of the item
     * @type {string}
     * @memberof ListsIdItemsPostRequest
     */
    'id'?: string;
    /**
     * 
     * @type {Def2}
     * @memberof ListsIdItemsPostRequest
     */
    'state'?: Def2;
    /**
     * The description of the item
     * @type {string}
     * @memberof ListsIdItemsPostRequest
     */
    'description'?: string;
    /**
     * Users assigned to the item
     * @type {Array<string>}
     * @memberof ListsIdItemsPostRequest
     */
    'assignedTo'?: Array<string>;
}


/**
 * 
 * @export
 * @interface ListsIdPutRequest
 */
export interface ListsIdPutRequest {
    /**
     * The new name of the list
     * @type {string}
     * @memberof ListsIdPutRequest
     */
    'name'?: string;
    /**
     * The new description of the list
     * @type {string}
     * @memberof ListsIdPutRequest
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface ListsPostRequest
 */
export interface ListsPostRequest {
    /**
     * The id of the list
     * @type {string}
     * @memberof ListsPostRequest
     */
    'id'?: string;
    /**
     * The name of the list
     * @type {string}
     * @memberof ListsPostRequest
     */
    'name'?: string;
    /**
     * The description of the list
     * @type {string}
     * @memberof ListsPostRequest
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface UsersPostRequest
 */
export interface UsersPostRequest {
    /**
     * Id of the user
     * @type {string}
     * @memberof UsersPostRequest
     */
    'id'?: string;
    /**
     * Name of the user
     * @type {string}
     * @memberof UsersPostRequest
     */
    'name'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rootGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rootGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rootGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.rootGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rootGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rootGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ItemsApi - axios parameter creator
 * @export
 */
export const ItemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get an item by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('itemsIdGet', 'id', id)
            const localVarPath = `/items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Assign an user to an item
         * @param {string} itemId 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemsItemIdAssignUserIdPost: async (itemId: string, userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('itemsItemIdAssignUserIdPost', 'itemId', itemId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('itemsItemIdAssignUserIdPost', 'userId', userId)
            const localVarPath = `/items/{itemId}/assign/{userId}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ItemsApi - functional programming interface
 * @export
 */
export const ItemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ItemsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get an item by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Def10>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemsApi.itemsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Assign an user to an item
         * @param {string} itemId 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemsItemIdAssignUserIdPost(itemId: string, userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Def10>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemsItemIdAssignUserIdPost(itemId, userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemsApi.itemsItemIdAssignUserIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ItemsApi - factory interface
 * @export
 */
export const ItemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ItemsApiFp(configuration)
    return {
        /**
         * Get an item by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemsIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Def10> {
            return localVarFp.itemsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Assign an user to an item
         * @param {string} itemId 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemsItemIdAssignUserIdPost(itemId: string, userId: string, options?: RawAxiosRequestConfig): AxiosPromise<Def10> {
            return localVarFp.itemsItemIdAssignUserIdPost(itemId, userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ItemsApi - object-oriented interface
 * @export
 * @class ItemsApi
 * @extends {BaseAPI}
 */
export class ItemsApi extends BaseAPI {
    /**
     * Get an item by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public itemsIdGet(id: string, options?: RawAxiosRequestConfig) {
        return ItemsApiFp(this.configuration).itemsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Assign an user to an item
     * @param {string} itemId 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public itemsItemIdAssignUserIdPost(itemId: string, userId: string, options?: RawAxiosRequestConfig) {
        return ItemsApiFp(this.configuration).itemsItemIdAssignUserIdPost(itemId, userId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListsApi - axios parameter creator
 * @export
 */
export const ListsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all lists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lists/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list by id
         * @param {string} id The id of the list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listsIdGet', 'id', id)
            const localVarPath = `/lists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all items in a list
         * @param {string} id The id of the list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdItemsGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listsIdItemsGet', 'id', id)
            const localVarPath = `/lists/{id}/items`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an item in a list
         * @param {string} id The id of the list
         * @param {string} itemId The id of the item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdItemsItemIdDelete: async (id: string, itemId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listsIdItemsItemIdDelete', 'id', id)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('listsIdItemsItemIdDelete', 'itemId', itemId)
            const localVarPath = `/lists/{id}/items/{itemId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an item in a list
         * @param {string} id The id of the list
         * @param {string} itemId The id of the item
         * @param {ListsIdItemsItemIdPutRequest} [listsIdItemsItemIdPutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdItemsItemIdPut: async (id: string, itemId: string, listsIdItemsItemIdPutRequest?: ListsIdItemsItemIdPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listsIdItemsItemIdPut', 'id', id)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('listsIdItemsItemIdPut', 'itemId', itemId)
            const localVarPath = `/lists/{id}/items/{itemId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(listsIdItemsItemIdPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an item in a list
         * @param {string} id The id of the list
         * @param {ListsIdItemsPostRequest} [listsIdItemsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdItemsPost: async (id: string, listsIdItemsPostRequest?: ListsIdItemsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listsIdItemsPost', 'id', id)
            const localVarPath = `/lists/{id}/items`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(listsIdItemsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a list
         * @param {string} id The id of the list
         * @param {ListsIdPutRequest} [listsIdPutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdPut: async (id: string, listsIdPutRequest?: ListsIdPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listsIdPut', 'id', id)
            const localVarPath = `/lists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(listsIdPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Change the state of a list
         * @param {string} id The id of the list
         * @param {Def2} state The new state of the list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdStatusStatePut: async (id: string, state: Def2, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listsIdStatusStatePut', 'id', id)
            // verify required parameter 'state' is not null or undefined
            assertParamExists('listsIdStatusStatePut', 'state', state)
            const localVarPath = `/lists/{id}/status/{state}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"state"}}`, encodeURIComponent(String(state)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new list
         * @param {ListsPostRequest} [listsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsPost: async (listsPostRequest?: ListsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lists/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(listsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListsApi - functional programming interface
 * @export
 */
export const ListsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all lists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Def3>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ListsApi.listsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a list by id
         * @param {string} id The id of the list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Def4>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ListsApi.listsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all items in a list
         * @param {string} id The id of the list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listsIdItemsGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Def7>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listsIdItemsGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ListsApi.listsIdItemsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete an item in a list
         * @param {string} id The id of the list
         * @param {string} itemId The id of the item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listsIdItemsItemIdDelete(id: string, itemId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listsIdItemsItemIdDelete(id, itemId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ListsApi.listsIdItemsItemIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update an item in a list
         * @param {string} id The id of the list
         * @param {string} itemId The id of the item
         * @param {ListsIdItemsItemIdPutRequest} [listsIdItemsItemIdPutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listsIdItemsItemIdPut(id: string, itemId: string, listsIdItemsItemIdPutRequest?: ListsIdItemsItemIdPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Def4>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listsIdItemsItemIdPut(id, itemId, listsIdItemsItemIdPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ListsApi.listsIdItemsItemIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create an item in a list
         * @param {string} id The id of the list
         * @param {ListsIdItemsPostRequest} [listsIdItemsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listsIdItemsPost(id: string, listsIdItemsPostRequest?: ListsIdItemsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Def4>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listsIdItemsPost(id, listsIdItemsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ListsApi.listsIdItemsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a list
         * @param {string} id The id of the list
         * @param {ListsIdPutRequest} [listsIdPutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listsIdPut(id: string, listsIdPutRequest?: ListsIdPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Def4>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listsIdPut(id, listsIdPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ListsApi.listsIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Change the state of a list
         * @param {string} id The id of the list
         * @param {Def2} state The new state of the list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listsIdStatusStatePut(id: string, state: Def2, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listsIdStatusStatePut(id, state, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ListsApi.listsIdStatusStatePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new list
         * @param {ListsPostRequest} [listsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listsPost(listsPostRequest?: ListsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Def4>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listsPost(listsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ListsApi.listsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ListsApi - factory interface
 * @export
 */
export const ListsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListsApiFp(configuration)
    return {
        /**
         * Get all lists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsGet(options?: RawAxiosRequestConfig): AxiosPromise<Def3> {
            return localVarFp.listsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list by id
         * @param {string} id The id of the list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Def4> {
            return localVarFp.listsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all items in a list
         * @param {string} id The id of the list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdItemsGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Def7> {
            return localVarFp.listsIdItemsGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an item in a list
         * @param {string} id The id of the list
         * @param {string} itemId The id of the item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdItemsItemIdDelete(id: string, itemId: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.listsIdItemsItemIdDelete(id, itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an item in a list
         * @param {string} id The id of the list
         * @param {string} itemId The id of the item
         * @param {ListsIdItemsItemIdPutRequest} [listsIdItemsItemIdPutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdItemsItemIdPut(id: string, itemId: string, listsIdItemsItemIdPutRequest?: ListsIdItemsItemIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Def4> {
            return localVarFp.listsIdItemsItemIdPut(id, itemId, listsIdItemsItemIdPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an item in a list
         * @param {string} id The id of the list
         * @param {ListsIdItemsPostRequest} [listsIdItemsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdItemsPost(id: string, listsIdItemsPostRequest?: ListsIdItemsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Def4> {
            return localVarFp.listsIdItemsPost(id, listsIdItemsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a list
         * @param {string} id The id of the list
         * @param {ListsIdPutRequest} [listsIdPutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdPut(id: string, listsIdPutRequest?: ListsIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Def4> {
            return localVarFp.listsIdPut(id, listsIdPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Change the state of a list
         * @param {string} id The id of the list
         * @param {Def2} state The new state of the list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdStatusStatePut(id: string, state: Def2, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.listsIdStatusStatePut(id, state, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new list
         * @param {ListsPostRequest} [listsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsPost(listsPostRequest?: ListsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Def4> {
            return localVarFp.listsPost(listsPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListsApi - object-oriented interface
 * @export
 * @class ListsApi
 * @extends {BaseAPI}
 */
export class ListsApi extends BaseAPI {
    /**
     * Get all lists
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public listsGet(options?: RawAxiosRequestConfig) {
        return ListsApiFp(this.configuration).listsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list by id
     * @param {string} id The id of the list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public listsIdGet(id: string, options?: RawAxiosRequestConfig) {
        return ListsApiFp(this.configuration).listsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all items in a list
     * @param {string} id The id of the list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public listsIdItemsGet(id: string, options?: RawAxiosRequestConfig) {
        return ListsApiFp(this.configuration).listsIdItemsGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an item in a list
     * @param {string} id The id of the list
     * @param {string} itemId The id of the item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public listsIdItemsItemIdDelete(id: string, itemId: string, options?: RawAxiosRequestConfig) {
        return ListsApiFp(this.configuration).listsIdItemsItemIdDelete(id, itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an item in a list
     * @param {string} id The id of the list
     * @param {string} itemId The id of the item
     * @param {ListsIdItemsItemIdPutRequest} [listsIdItemsItemIdPutRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public listsIdItemsItemIdPut(id: string, itemId: string, listsIdItemsItemIdPutRequest?: ListsIdItemsItemIdPutRequest, options?: RawAxiosRequestConfig) {
        return ListsApiFp(this.configuration).listsIdItemsItemIdPut(id, itemId, listsIdItemsItemIdPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create an item in a list
     * @param {string} id The id of the list
     * @param {ListsIdItemsPostRequest} [listsIdItemsPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public listsIdItemsPost(id: string, listsIdItemsPostRequest?: ListsIdItemsPostRequest, options?: RawAxiosRequestConfig) {
        return ListsApiFp(this.configuration).listsIdItemsPost(id, listsIdItemsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a list
     * @param {string} id The id of the list
     * @param {ListsIdPutRequest} [listsIdPutRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public listsIdPut(id: string, listsIdPutRequest?: ListsIdPutRequest, options?: RawAxiosRequestConfig) {
        return ListsApiFp(this.configuration).listsIdPut(id, listsIdPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Change the state of a list
     * @param {string} id The id of the list
     * @param {Def2} state The new state of the list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public listsIdStatusStatePut(id: string, state: Def2, options?: RawAxiosRequestConfig) {
        return ListsApiFp(this.configuration).listsIdStatusStatePut(id, state, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new list
     * @param {ListsPostRequest} [listsPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public listsPost(listsPostRequest?: ListsPostRequest, options?: RawAxiosRequestConfig) {
        return ListsApiFp(this.configuration).listsPost(listsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get an user by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersIdGet', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new user
         * @param {UsersPostRequest} [usersPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPost: async (usersPostRequest?: UsersPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usersPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * Get an user by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Def12>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new user
         * @param {UsersPostRequest} [usersPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersPost(usersPostRequest?: UsersPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Def12>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersPost(usersPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * Get an user by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Def12> {
            return localVarFp.usersIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new user
         * @param {UsersPostRequest} [usersPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPost(usersPostRequest?: UsersPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Def12> {
            return localVarFp.usersPost(usersPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * Get an user by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersIdGet(id: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new user
     * @param {UsersPostRequest} [usersPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersPost(usersPostRequest?: UsersPostRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersPost(usersPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



